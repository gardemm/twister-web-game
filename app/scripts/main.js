// Generated by CoffeeScript 1.10.0
'use strict';
var Animal, Horse, Snake, Twister, sam, tom, twist,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Animal = (function() {
  function Animal(name) {
    this.name = name;
  }

  Animal.prototype.move = function(meters) {
    return console.log(this.name + (" moved " + meters + "m."));
  };

  return Animal;

})();

Snake = (function(superClass) {
  extend(Snake, superClass);

  function Snake() {
    return Snake.__super__.constructor.apply(this, arguments);
  }

  Snake.prototype.move = function() {
    console.log("Slithering...");
    return Snake.__super__.move.call(this, 667);
  };

  return Snake;

})(Animal);

Horse = (function(superClass) {
  extend(Horse, superClass);

  function Horse() {
    return Horse.__super__.constructor.apply(this, arguments);
  }

  Horse.prototype.move = function() {
    console.log("Galloping...");
    return Horse.__super__.move.call(this, 47);
  };

  return Horse;

})(Animal);

sam = new Snake("Sammy the Python");

tom = new Horse("Tommy the Palomino");

sam.move();

tom.move();

Twister = (function() {
  var getRand;

  function Twister() {
    this.col = ['yellow', 'green', 'red', 'blue'];
    this.part = ['leg', 'hand'];
    this.arrow = ['left', 'right'];
    this.timer = {};
    this.cur = {
      col: this.col[0],
      part: this.part[0],
      arrow: this.arrow[0]
    };
  }

  getRand = function(array) {
    return array[parseInt(Math.random() * array.length)];
  };

  Twister.prototype.draw = function() {
    $('body').css('background-color', this.cur.col);
    return $('.info').text(this.cur.arrow + ' ' + this.cur.part);
  };

  Twister.prototype.change = function() {
    this.cur.col = getRand(this.col);
    this.cur.part = getRand(this.part);
    this.cur.arrow = getRand(this.arrow);
    this.draw();
    return this.getCurrent();
  };

  Twister.prototype.start = function() {
    var that;
    that = this;
    console.log('start -->');
    return this.timer = setInterval((function() {
      console.log('iter');
      return that.change();
    }), 3000);
  };

  Twister.prototype.stop = function() {};

  Twister.prototype.pause = function() {};

  Twister.prototype.restart = function() {};

  Twister.prototype.getCurrent = function() {
    console.log('col: ' + this.cur.col + ' part: ' + this.cur.part + ' arrow: ' + this.cur.arrow);
    return this.cur;
  };

  return Twister;

})();

twist = new Twister;

twist.start();
